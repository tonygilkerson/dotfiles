# Make Mac more like a real, GNU/Linux computer.

#
# Colors aid accessibility on the CLI.
#
export CLICOLOR=1
alias ls="ls -Gh"
alias ll='ls -ltra'
alias cc='clear;echo -n "Hi, "; whoami; echo " "'
alias tx='tmux new -s aeg'
alias cda='cd ~/act3-gitlab'
alias cdm2='cd ~/m2-gitlab'

#
# We use Bash in this household, and we ain't never gonna change, not
# for nobody, no how. And for damn sure, not for no "Apple Computer, inc."
#
export BASH_SILENCE_DEPRECATION_WARNING=1

#
# Setup git completion.
#
git_completion='/Applications/Xcode.app/Contents/Developer/usr/share/git-core/git-completion.bash'
[ -x "$(which git)" ] && [ -f "$git_completion" ] && source "$git_completion"

#
# The next line updates PATH for the Google Cloud SDK.
#
if [ -f '/Users/tgilkerson/google-cloud-sdk/path.bash.inc' ]; then . '/Users/tgilkerson/google-cloud-sdk/path.bash.inc'; fi


#
# The next line enables shell command completion for gcloud.
#
if [ -f '/Users/tgilkerson/google-cloud-sdk/completion.bash.inc' ]; then . '/Users/tgilkerson/google-cloud-sdk/completion.bash.inc'; fi

#
# Enable bash completion
#
[[ -r "/usr/local/etc/profile.d/bash_completion.sh" ]] && . "/usr/local/etc/profile.d/bash_completion.sh"

#
# kmerge function
#
#function kmerge() {
#  cp ~/.kube/config ~/.kube/config-$(date '+%Y-%m-%d-%H:%M:%S')
#  KUBECONFIG=~/.kube/config:$1 kubectl config view --flatten > ~/.kube/mergedkub && mv ~/.kube/mergedkub ~/.kube/config
#}

#
# kpt
#
export KPT_FN_RUNTIME=podman

#
# Update path for krew plugins
#
export PATH="${PATH}:${HOME}/.krew/bin"

#
# Toolchain needed for TinyGo
# ref: https://tinygo.org/docs/reference/microcontrollers/esp32-coreboard-v2/
#      https://docs.espressif.com/projects/esp-idf/en/release-v3.0/get-started/macos-setup.html
#
export PATH=$PATH:$HOME/esp/xtensa-esp32-elf/bin

#
# Go
#
export GOPATH=$HOME/go
export PATH=$GOPATH/bin:$PATH


# 
# jwt cli
# On my Mac I had to:
#  
#  $ brew install rust
#  $ cargo install jwt-cli
#  Then I could do stuff like `jwt decode $TOKEN`
export PATH=$PATH:/Users/tgilkerson/.cargo/bin

# see: https://kind.sigs.k8s.io/docs/user/rootless/
export KIND_EXPERIMENTAL_PROVIDER=podman

#
# Will add all in ~/.kube/config-giles to KUBECONFIG
# Comment out and just run manually as needed
# source load-k8s-config.sh

# Use new kubectl plugin called “gke-gcloud-auth-plugin”
# see: https://cloud.google.com/blog/products/containers-kubernetes/kubectl-auth-changes-in-gke
export USE_GKE_GCLOUD_AUTH_PLUGIN=True


#
# Homebrew settings for cloudnative-pg operator development
# 
# I am not sure if I want to do this all the time so I am creating a 
# function that I can call to setup my cnpg dev sandbox when needed
#
# ref: https://github.com/cloudnative-pg/cloudnative-pg/blob/main/contribute/development_environment/README.md#installation
#
# 
function cnpgdev() {
  export PATH="/usr/local/opt/gettext/bin:$PATH"
  export PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
  export PATH="/usr/local/opt/findutils/libexec/gnubin:$PATH"
  export PATH="/usr/local/opt/gnu-getopt/bin:$PATH"
  export PATH="/usr/local/opt/gnu-sed/libexec/gnubin:$PATH"
  export PATH="/usr/local/opt/gnu-tar/libexec/gnubin:$PATH"
  export MANPATH="/usr/local/opt/coreutils/libexec/gnuman:$MANPATH"
  export MANPATH="/usr/local/opt/findutils/libexec/gnuman:$MANPATH"
  export MANPATH="/usr/local/opt/gnu-getopt/share/man:$MANPATH"
  export MANPATH="/usr/local/opt/gnu-sed/libexec/gnuman:$MANPATH"
  export MANPATH="/usr/local/opt/gnu-tar/libexec/gnuman:$MANPATH"
  export LDFLAGS="-L/usr/local/opt/zlib/lib $LDFLAGS"
  export LDFLAGS="-L/usr/local/opt/gettext/lib $LDFLAGS"
  export LDFLAGS="-L/usr/local/opt/readline/lib $LDFLAGS"
  export CPPFLAGS="-I/usr/local/opt/zlib/include $CPPFLAGS"
  export CPPFLAGS="-I/usr/local/opt/gettext/include $CPPFLAGS"
  export CPPFLAGS="-I/usr/local/opt/readline/include $CPPFLAGS"
  export PKG_CONFIG_PATH="/usr/local/opt/readline/lib/pkgconfig"
  # GPGv2 backward compatibility
  export GPG_AGENT_INFO=~/.gnupg/S.gpg-agent::1
  export GPG_TTY=$(tty)
}


#
# iTerm2 Integration
#
test -e ~/.iterm2_shell_integration.bash && source ~/.iterm2_shell_integration.bash || true

iterm2_print_user_vars() {

  KUBECONTEXT=$(CTX=$(kubectl config current-context) 2> /dev/null;if [ $? -eq 0 ]; then echo $CTX;fi)
  iterm2_set_user_var kubeContext "$KUBECONTEXT"
  
}
