###################################################################################################
# The Out-of-the-box Ubuntu bashrc
###################################################################################################
# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# # uncomment for a colored prompt, if the terminal has the capability; turned
# # off by default to not distract the user: the focus in a terminal window
# # should be on the output of commands, not on the prompt
# #force_color_prompt=yes

# if [ -n "$force_color_prompt" ]; then
#     if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
# 	# We have color support; assume it's compliant with Ecma-48
# 	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
# 	# a case would tend to support setf rather than setaf.)
# 	color_prompt=yes
#     else
# 	color_prompt=
#     fi
# fi

# if [ "$color_prompt" = yes ]; then
#     PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
# else
#     PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
# fi
# unset color_prompt force_color_prompt

# # If this is an xterm set the title to user@host:dir
# case "$TERM" in
# xterm*|rxvt*)
#     PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
#     ;;
# *)
#     ;;
# esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

###################################################################################################
# My Stuff
###################################################################################################
# User specific environment
if ! [[ "$PATH" =~ "$HOME/.local/bin:$HOME/bin:" ]]
then
  PATH="$HOME/.local/bin:$HOME/bin:$PATH"
fi
export PATH

# Uncomment the following line if you don't like systemctl's auto-paging feature:
# export SYSTEMD_PAGER=

#
# Aliases
#
export CLICOLOR=1
alias ls="ls -Gh"
alias ll='ls -ltra'
alias cc='clear;echo -n "Hi, "; whoami; echo " "'
alias ccc="clear;tree -d -L 4 --filelimit 4"
alias tx='tmux new -s tony'
# ckad
alias k=kubectl
alias ns='kubectl config set-context --current --namespace'
alias ctx='kubectl config use-context'
# gitlab roots
#gitlab-rs-glu is on VDL
alias cdrs='cd ~/gitlab-rs-glu/rs'
alias cddle='cd ~/gitlab-dle'
alias cddleu='cd ~/gitlab-dle-ultimate'
alias cdnote="cd ~/gitlab-rs-glu/tony.gilkerson/notebook"

#
# Prompt
#
# d - the date in "Weekday Month Date" format (e.g., "Tue May 26")
# e - an ASCII escape character (033)
# h - the hostname up to the first .
# H - the full hostname
# j - the number of jobs currently run in background
# l - the basename of the shells terminal device name
# n - newline
# r - carriage return
# s - the name of the shell, the basename of $0 (the portion following the final slash)
# t - the current time in 24-hour HH:MM:SS format
# T - the current time in 12-hour HH:MM:SS format
# @ - the current time in 12-hour am/pm format
# A - the current time in 24-hour HH:MM format
# u - the username of the current user
# v - the version of bash (e.g., 4.00)
# V - the release of bash, version + patch level (e.g., 4.00.0)
# w - Complete path of current working directory
# W - the basename of the current working directory
# ! - the history number of this command
# # - the command number of this command
# $ - if the effective UID is 0, a #, otherwise a $
# nnn - the character corresponding to the octal number nnn
# \ - a backslash
# [ - begin a sequence of non-printing characters, which could be used to embed a terminal control sequence into the prompt
# ] - end a sequence of non-printing characters

get_host() {
    green="\[\033[0;32m\]"
    escape="\[\033[0m\]"
    host="udev"
    echo -e "${green}${host}: ${escape}"
}

get_venv() {
    green="\[\033[0;32m\]"
    escape="\[\033[0m\]"
    if [[ -n "${VIRTUAL_ENV##*/}" ]]; then 
      echo -e "${green}(${VIRTUAL_ENV##*/})${escape}" 
    fi
}

parse_git_branch() {
    branch=$(git branch 2> /dev/null | grep "*" | sed -e '/^\* /s/^\* //')
    if [ ! "${branch}" == "" ]; then
      red="\[\033[0;31m\]"
      escape="\[\033[0m\]"
      echo -e "${red}(${branch})${escape}"
    fi
}
# export PS1='$(get_host)\w $(parse_git_branch)\$ '
PROMPT_COMMAND='PS1="$(get_host)\w $(get_venv)$(parse_git_branch)\n\$ "' 

# #
# # GO - Update the path 
# #

# # Add Go binaries to PATH
# if [ -d "$HOME/go/bin" ]; then
#   PATH="$HOME/go/bin:$PATH"
# fi

#
# BREW - Export env vars and add brew to the path
#
eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

#
# GPG - avoid "failed to write commit object" when committing
#
export GPG_TTY=$(tty)

#
# point to InfoList data file
#
export INFOLIST_DATA=/home/tgilkerson/gitlab-dle/anthony.gilkerson/notebook/infolist/infolist-data-rs.yaml

